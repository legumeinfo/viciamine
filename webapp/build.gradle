apply plugin: "war"
apply from: "https://raw.github.com/akhikhl/gretty/master/pluginScripts/gretty.plugin"
apply plugin: "webapp"
apply plugin: "com.bmuschko.cargo"

sourceSets {
    main {
        java {
            srcDirs = ["src/main/java"]
        }
        resources {
            srcDirs = ["src/main/resources"]
        }
    }
}

configurations {
    onlyRunTime
}

def explodedWebAppDir = "$buildDir/explodedWebApp"
def mergePropsDir = "$buildDir/props"

dependencies {
    compile (project(":dbmodel")) {transitive = false}
    compile group: "org.intermine", name: "bio-core", version: System.getProperty("bioVersion"), transitive: false
    compile group: "org.intermine", name: "intermine-api", version: System.getProperty("imVersion")
    compile group: "org.intermine", name: "intermine-webapp", version: System.getProperty("imVersion"), classifier: "classes"
    compile group: "org.intermine", name: "intermine-webtasks", version: System.getProperty("imVersion")
    onlyRunTime group: 'org.intermine', name: 'bluegenes', version: System.getProperty("blueGenesVersion")
    
    // ADDED SH
    compile group: "org.intermine", name: "bio-webapp", version: System.getProperty("bioVersion"), classifier: "classes"
    compile fileTree(dir: '../libs', include: '*.jar')

  // https://mvnrepository.com/artifact/javax.xml.rpc/javax.xml.rpc-api
  compile group: 'javax.xml.rpc', name: 'javax.xml.rpc-api', version: '1.1'
    
  // https://mvnrepository.com/artifact/org.apache.axis/axis
  compile group: 'org.apache.axis', name: 'axis', version: '1.4'
    
  // https://mvnrepository.com/artifact/org.apache.commons/commons-math3
  compile group: 'org.apache.commons', name: 'commons-math3', version: '3.6.1'

  // https://mvnrepository.com/artifact/org.apache.httpcomponents/httpclient
  compile group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.5'

  // https://mvnrepository.com/artifact/org.biojava/biojava-alignment
  compile group: 'org.biojava', name: 'biojava-alignment', version: '5.0.2'

  // https://mvnrepository.com/artifact/org.biojava/biojava-ontology
  compile group: 'org.biojava', name: 'biojava-ontology', version: '5.0.2'

  // https://mvnrepository.com/artifact/org.jglobus/gram
  compile group: 'org.jglobus', name: 'gram', version: '2.1.0'
  
}

war {
    dependsOn 'mergeProperties', 'summariseObjectStore', 'unwarBioWebApp', 'addStrutsConfig'
    finalizedBy 'warWebApp'
}

task warWebApp(type: War) {
    dependsOn 'copyWebappContent'
    description "Create the war from the build/explodedWebAppDir directory"
    from "${explodedWebAppDir}"
    exclude "WEB-INF/web.properties"
    webInf { from "${mergePropsDir}" }
}

task copyWebappContent(type: Copy) {
    from "src/main/webapp/"
    into "${explodedWebAppDir}"
}

// read in mine.properties to get the contextPath
def props = new Properties()
file(minePropertyFile).withInputStream { props.load(it) }

gretty {
    jvmArgs = ['-Dorg.apache.el.parser.SKIP_IDENTIFIER_CHECK=true']
    contextPath = props.getProperty("webapp.path")
}

webappConfig {
    mineName = "viciamine"
    objectStoreName = "os.production"
    userProfileObjectStoreName = "os.userprofile-production"
    userProfileObjectStoreWriterName = "osw.userprofile-production"
    defaultInterminePropertiesFile = "default.intermine.production.properties"
    propsDir = "$mergePropsDir"
}

// ---------------------------------------------------------------------------------------------------------------------
// Use cargo to deploy the webapp to an existing Tomcat instance, either via the HTTP Tomcat manager or local file copy.
// ---------------------------------------------------------------------------------------------------------------------
cargo {

  // default port
  int remotePort = 8080
  if (props.getProperty("webapp.port") != null) {
     remotePort = props.getProperty("webapp.port").toInteger()
  }

  // change this to match your Tomcat major version (keep the x)
  containerId = 'tomcat8x'
  port = remotePort

  // change this to the Tomcat root of your choice
  deployable {
    context = props.getProperty("webapp.path")
  }

  // if "hostname" is defined in properties file, use that
  // otherwise derive from deployUrl, e.g. http://localhost:8080
  def remoteHostName = "shokin-webapps"
  if (props.hasProperty("webapp.hostname")) {
    remoteHostName = props.getProperty("webapp.hostname")
  } else {
    remoteHostName = getServerName(props.getProperty("webapp.deploy.url"))
  }

  def remoteProtocol = "http"
  if (props.hasProperty("webapp.protocol")) {
    remoteProtocol = props.getProperty("webapp.protocol")
  }

  // change these to match your Tomcat host and tomcat-users config
  remote {
    hostname = remoteHostName
    protocol = remoteProtocol
    port = remotePort
    username = props.getProperty("webapp.manager")
    password = props.getProperty("webapp.password")
  }

}

cargoStartLocal.dependsOn war
cargoRunLocal.dependsOn war
cargoRedeployLocal.dependsOn war
cargoDeployRemote.dependsOn war
cargoRedeployRemote.dependsOn war

// gets the hostname from the old intermine parameter, e.g. http://localhost:8080 > localhost
String getServerName(String deployUrl) {
    // chop off protocol
    if (deployUrl != null && deployUrl.indexOf("/") >= 0) {
        // https:// or http://
        deployUrl = deployUrl.substring(deployUrl.indexOf("/") + 2, deployUrl.length())
    }

    // chop off port
    if (deployUrl != null && deployUrl.contains(":")) {
        // localhost:8080
        String[] bits = deployUrl.split(":")
        deployUrl = bits[0]
    }

    return deployUrl
}

task blueGenesStart(type: JavaExec) {
    classpath = configurations.onlyRunTime
    main = "bluegenes.core"
    //println "Loading blue genes for '" + props.getProperty("project.title") + "' at '" + props.getProperty("webapp.baseurl") + "/" + props.getProperty("webapp.path") + "'"

    //:bluegenes-default-service-root "http://beta.legumemine.org/beta"
    environment("bluegenes-default-service-root", props.getProperty("webapp.baseurl") + "/" + props.getProperty("webapp.path"))
    // FlyMine Beta
    environment("bluegenes-default-mine-name", props.getProperty("project.title"))
    environment("bluegenes-jar-version", System.getProperty("blueGenesVersion"))
}
